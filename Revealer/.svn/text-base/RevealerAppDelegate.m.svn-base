//
//  RevealerAppDelegate.m
//  Revealer
//
//  Created by Nano8Blazex on 7/4/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "RevealerAppDelegate.h"

@implementation RevealerAppDelegate

@synthesize window;



- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
    ourItem = nil;

    [self updateStatusMenuDisplay:self];
    [self updateStatusBarOnly:self];
}

- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)sender {
    BOOL statusEnabled = [[[[NSUserDefaultsController sharedUserDefaultsController] values] valueForKey:@"statusEnabled"] boolValue]; //YES if status bar is enabled, NO if not
	return !statusEnabled;
}

- (void)windowWillClose:(NSNotification *)notification {
}

//terminate stuff
-(void)applicationWillTerminate:(NSNotification *)notification {
    if (ourItem != nil) [ourItem release];
}

#pragma mark no window only status bar 

- (IBAction)showMainWindows:(id)sender {
    [window makeKeyAndOrderFront:sender];
}

- (IBAction)updateStatusBarOnly:(id)sender {
    BOOL statusBarOnly = [[[[NSUserDefaultsController sharedUserDefaultsController] values] valueForKey:@"statusBarOnly"] boolValue];
    if (!statusBarOnly) {
        //ProcessSerialNumber psn = { 0, kCurrentProcess };
        //TransformProcessType(&psn, kProcessTransformToForegroundApplication); //shows the dock icon, pity we can't do the reverse
        [self showMainWindows:sender];
    } else {
        //DO nOT SHOW WINDOW ON LAUNCH
    }
}

#pragma mark status bar

- (IBAction)updateStatusMenuDisplay:(id)sender {
    BOOL statusEnabled = [[[[NSUserDefaultsController sharedUserDefaultsController] values] valueForKey:@"statusEnabled"] boolValue];
    if (statusEnabled) {
        [self activateStatusMenu];
    } else {
        [self disableStatusMenu];
        [[[NSUserDefaultsController sharedUserDefaultsController] values] setValue:[NSNumber numberWithBool:NO] forKey:@"openAtLogin"];
        [[[NSUserDefaultsController sharedUserDefaultsController] values] setValue:[NSNumber numberWithBool:NO] forKey:@"statusBarOnly"];
    }
    [self toggleLoginItemStatus:sender];
}

- (void)activateStatusMenu
{
    if (ourItem == nil) {
        NSStatusBar *bar = [NSStatusBar systemStatusBar];
        
        ourItem = [bar statusItemWithLength:NSSquareStatusItemLength];
        [ourItem retain];
        
        [ourItem setImage:[NSImage imageNamed:@"statusIcon.png"]];
        [ourItem setAlternateImage:[NSImage imageNamed:@"alternateStatusIcon.png"]];
        //[ourItem setTitle:@"FR"];
        [ourItem setHighlightMode:YES];
        [ourItem setMenu:ourStatusBarMenu];
    }
}

-(void)disableStatusMenu {
    if (ourItem!=nil) {
        NSStatusBar *bar = [NSStatusBar systemStatusBar];
        [bar removeStatusItem:ourItem];
        [ourItem release];
        ourItem = nil;
    }
}

#pragma mark login items

-(void) addAppAsLoginItem{
	NSString * appPath = [[NSBundle mainBundle] bundlePath];
    
	// This will retrieve the path for the application
	// For example, /Applications/test.app
	CFURLRef url = (CFURLRef)[NSURL fileURLWithPath:appPath]; 
    
	// Create a reference to the shared file list.
    // We are adding it to the current user only.
    // If we want to add it all users, use
    // kLSSharedFileListGlobalLoginItems instead of
    //kLSSharedFileListSessionLoginItems
	LSSharedFileListRef loginItems = LSSharedFileListCreate(NULL,
                                                            kLSSharedFileListSessionLoginItems, NULL);
	if (loginItems) {
		//Insert an item to the list.
		LSSharedFileListItemRef item = LSSharedFileListInsertItemURL(loginItems,
                                                                     kLSSharedFileListItemLast, NULL, NULL,
                                                                     url, NULL, NULL);
		if (item){
			CFRelease(item);
        }
	}	
    
	CFRelease(loginItems);
}

-(void) deleteAppFromLoginItem{
	NSString * appPath = [[NSBundle mainBundle] bundlePath];
    
	// This will retrieve the path for the application
	// For example, /Applications/test.app
	CFURLRef url = (CFURLRef)[NSURL fileURLWithPath:appPath]; 
    
	// Create a reference to the shared file list.
	LSSharedFileListRef loginItems = LSSharedFileListCreate(NULL,
                                                            kLSSharedFileListSessionLoginItems, NULL);
    
	if (loginItems) {
		UInt32 seedValue;
		//Retrieve the list of Login Items and cast them to
		// a NSArray so that it will be easier to iterate.
		CFArrayRef loginItemsArray = LSSharedFileListCopySnapshot(loginItems, &seedValue);
		
		for(int i = 0 ; i< [(NSArray *)loginItemsArray count]; i++){
			LSSharedFileListItemRef itemRef = (LSSharedFileListItemRef)[(NSArray *)loginItemsArray
                                                                        objectAtIndex:i];
			//Resolve the item with URL
			if (LSSharedFileListItemResolve(itemRef, 0, (CFURLRef*) &url, NULL) == noErr) {
				NSString * urlPath = [(NSURL*)url path];
				if ([urlPath compare:appPath] == NSOrderedSame){
					LSSharedFileListItemRemove(loginItems,itemRef);
				}
                CFRelease(url);
			}
		}
		CFRelease(loginItemsArray);
	}
    
    CFRelease(loginItems);
}

-(IBAction)toggleLoginItemStatus:(id)sender {
    BOOL openAtLogin = [[[[NSUserDefaultsController sharedUserDefaultsController] values] valueForKey:@"openAtLogin"] boolValue];
    if (openAtLogin) {
        [self deleteAppFromLoginItem]; //reset it
        [self addAppAsLoginItem];
    } else {
        [self deleteAppFromLoginItem];
    }
}


@end
